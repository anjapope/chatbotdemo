name: Deploy to server

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
      - name: Test SSH connectivity
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
        run: |
          # Default to 'ubuntu' if SERVER_USER is not set in secrets
          echo "Testing SSH connectivity to ${SERVER_HOST} as ${SERVER_USER:-ubuntu}"
          ssh -o BatchMode=yes -o ConnectTimeout=10 ${SERVER_USER:-ubuntu}@${SERVER_HOST} 'echo SSH_OK' || (echo 'SSH test failed' && exit 1)

      - name: Sync project to server (exclude .env) with retries
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_TARGET: ${{ secrets.SERVER_TARGET }}
        run: |
          set -e
          # Default to 'ubuntu' if SERVER_USER is not set
          USERHOST="${SERVER_USER:-ubuntu}@${SERVER_HOST}"
          RSYNC_CMD="rsync -e \"ssh -v -o StrictHostKeyChecking=yes\" -avz --delete --exclude='.git' --exclude='.env' ./ ${USERHOST}:${SERVER_TARGET}"
          echo "Running: $RSYNC_CMD"
          attempts=0
          until [ $attempts -ge 3 ]
          do
            attempts=$((attempts+1))
            echo "rsync attempt $attempts"
            if eval $RSYNC_CMD; then
              echo "rsync succeeded"
              break
            else
              echo "rsync failed (attempt $attempts)"
              sleep 3
            fi
          done
          if [ $attempts -ge 3 ]; then
            echo "rsync failed after $attempts attempts" && exit 1
          fi

      - name: Write .env on server and restart backend
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          TARGET: ${{ secrets.SERVER_TARGET }}
        run: |
          # Default to 'ubuntu' if SERVER_USER not provided
          USERHOST="${SERVER_USER:-ubuntu}@${SERVER_HOST}"
          # Write .env on the remote server using the OPENAI_API_KEY secret
          ssh ${USERHOST} bash -s <<'EOF'
          set -e
          mkdir -p "$TARGET"
          cat > "$TARGET/.env" <<'ENV'
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL=gpt-4o
          ADMIN_TOKEN=secret-token
          RERANK_N=5
          ENV

          # Create a systemd service unit if it doesn't exist. This makes the backend resilient to reboots.
          SERVICE_PATH=/etc/systemd/system/chatbot.service
          if [ ! -f "$SERVICE_PATH" ]; then
            sudo tee "$SERVICE_PATH" > /dev/null <<'SERVICE'
[Unit]
Description=Chatbot Python backend
After=network.target

[Service]
User=${USER:-ubuntu}
WorkingDirectory=${TARGET}
ExecStart=/usr/bin/python3 ${TARGET}/server_py.py
Restart=on-failure
RestartSec=5
EnvironmentFile=${TARGET}/.env

[Install]
WantedBy=multi-user.target
SERVICE
            sudo systemctl daemon-reload
            sudo systemctl enable chatbot.service
          fi

          # Restart the service via systemd (will start it if not already running)
          sudo systemctl restart chatbot.service || (sudo systemctl start chatbot.service)
          # Give the service a moment to start and write a short status excerpt to the deploy log
          sleep 1
          sudo systemctl status chatbot.service --no-pager || true
          sudo journalctl -u chatbot.service -n 40 --no-pager || true
          EOF
